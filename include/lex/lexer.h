//
// Created by dxy on 2020/8/20.
//

#ifndef CCOMPILER_LEXER_H
#define CCOMPILER_LEXER_H

#include <fstream>

#include "lex/nfa.h"
#include "lex/lex_rule.h"

namespace CCompiler {
    class Lexer {
    public:
        explicit Lexer(const std::string &source_file) :
                line_(0), column_(0), source_file_stream_(source_file) {}

        /**
         * Initialize NFA by reading data from a valid NFA file.
         *
         * @param nfa_file A file stores NFA which is generated by 'WriteNfa()'.
         */
        static void NfaInit(const std::string &nfa_file) {
            nfa_ = Nfa::ReadNfa(nfa_file);
        }

        virtual ~Lexer() {
            source_file_stream_.close();
        }

        /**
         * It gets a token from 'source_file_stream_' and do some actions
         * according to the token's type. It can automatically exclude some
         * useless and invalid tokens.
         *
         * @return If no valid token remains, it returns an empty token.
         */
        Token NextToken();

    private:
        Token NextTokenInLine(StrConstIt &begin, StrConstIt &end, Nfa &nfa);

        static Nfa nfa_;
        std::ifstream source_file_stream_;
        int line_;
        int column_;
    };
}

#endif //CCOMPILER_LEXER_H

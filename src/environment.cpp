//
// Created by dxy on 2020/8/25.
//

#include "environment.h"

#include <sstream>

#include "lex/lexer.h"

using namespace CCompiler;
using namespace std;

map<string, int> Environment::symbol_map_{
        {"auto",           0},
        {"break",          1},
        {"case",           2},
        {"char",           3},
        {"const",          4},
        {"continue",       5},
        {"default",        6},
        {"do",             7},
        {"double",         8},
        {"else",           9},
        {"enum",           10},
        {"extern",         11},
        {"float",          12},
        {"for",            13},
        {"goto",           14},
        {"if",             15},
        {"inline",         16},
        {"int",            17},
        {"long",           18},
        {"register",       19},
        {"restrict",       20},
        {"return",         21},
        {"short",          22},
        {"signed",         23},
        {"sizeof",         24},
        {"static",         25},
        {"struct",         26},
        {"switch",         27},
        {"typedef",        28},
        {"union",          29},
        {"unsigned",       30},
        {"void",           31},
        {"volatile",       32},
        {"while",          33},
        {"_Alignas",       34},
        {"_Alignof",       35},
        {"_Atomic",        36},
        {"_Bool",          37},
        {"_Complex",       38},
        {"_Generic",       39},
        {"_Imaginary",     40},
        {"_Noreturn",      41},
        {"_Static_assert", 42},
        {"_Thread_local",  43},
        {"identifier",     44},
        {"number",         45},
        {"~",              46},
        {"*",              47},
        {"->",             48},
        {".",              49},
        {"?",              50},
        {"-",              51},
        {"+",              52},
        {"++",             53},
        {"--",             54},
        {"/",              55},
        {"%",              56},
        {"=",              57},
        {"<<",             58},
        {">>",             59},
        {"<",              60},
        {">",              61},
        {"<=",             62},
        {">=",             63},
        {"==",             64},
        {"!=",             65},
        {"&",              66},
        {"|",              67},
        {"^",              68},
        {"&&",             69},
        {"||",             70},
        {"!",              71},
        {"*=",             72},
        {"/=",             73},
        {"%=",             74},
        {"+=",             75},
        {"-=",             76},
        {"<<=",            77},
        {">>=",            78},
        {"&=",             79},
        {"^=",             80},
        {"|=",             81},
        {"(",              82},
        {")",              83},
        {"[",              84},
        {"]",              85},
        {"{",              86},
        {"}",              87},
        {",",              88},
        {":",              89},
        {";",              90},
        {"...",            91},
        {"#",              92},
        {"character",      93},
        {"string",         94},
        {"comment",        95},
        {"delim",          96}
};

map<string, int> Environment::regex_rules_{
        {"auto",                                                        0},
        {"break",                                                       1},
        {"case",                                                        2},
        {"char",                                                        3},
        {"const",                                                       4},
        {"continue",                                                    5},
        {"default",                                                     6},
        {"do",                                                          7},
        {"double",                                                      8},
        {"else",                                                        9},
        {"enum",                                                        10},
        {"extern",                                                      11},
        {"float",                                                       12},
        {"for",                                                         13},
        {"goto",                                                        14},
        {"if",                                                          15},
        {"inline",                                                      16},
        {"int",                                                         17},
        {"long",                                                        18},
        {"register",                                                    19},
        {"restrict",                                                    20},
        {"return",                                                      21},
        {"short",                                                       22},
        {"signed",                                                      23},
        {"sizeof",                                                      24},
        {"static",                                                      25},
        {"struct",                                                      26},
        {"switch",                                                      27},
        {"typedef",                                                     28},
        {"union",                                                       29},
        {"unsigned",                                                    30},
        {"void",                                                        31},
        {"volatile",                                                    32},
        {"while",                                                       33},
        {"_Alignas",                                                    34},
        {"_Alignof",                                                    35},
        {"_Atomic",                                                     36},
        {"_Bool",                                                       37},
        {"_Complex",                                                    38},
        {"_Generic",                                                    39},
        {"_Imaginary",                                                  40},
        {"_Noreturn",                                                   41},
        {"_Static_assert",                                              42},
        {"_Thread_local",                                               43},
        {"[a-zA-Z_][a-zA-Z0-9_]*",                                      44},
        {"(?:0|[1-9][0-9]*|(?:0x|0X)[0-9a-fA-F]+|0[0-7]+)(?:u|U|l|L)*", 45},
        {"~",                                                           46},
        {"\\*",                                                         47},
        {"->",                                                          48},
        {"\\.",                                                         49},
        {"\\?",                                                         50},
        {"-",                                                           51},
        {"\\+",                                                         52},
        {"\\+\\+",                                                      53},
        {"--",                                                          54},
        {"/",                                                           55},
        {"%",                                                           56},
        {"=",                                                           57},
        {"<<",                                                          58},
        {">>",                                                          59},
        {"<",                                                           60},
        {">",                                                           61},
        {"<=",                                                          62},
        {">=",                                                          63},
        {"==",                                                          64},
        {"!=",                                                          65},
        {"&",                                                           66},
        {"\\|",                                                         67},
        {"\\^",                                                         68},
        {"&&",                                                          69},
        {"\\|\\|",                                                      70},
        {"!",                                                           71},
        {"\\*=",                                                        72},
        {"/=",                                                          73},
        {"%=",                                                          74},
        {"\\+=",                                                        75},
        {"-=",                                                          76},
        {"<<=",                                                         77},
        {">>=",                                                         78},
        {"&=",                                                          79},
        {"\\^=",                                                        80},
        {"\\|=",                                                        81},
        {"\\(",                                                         82},
        {"\\)",                                                         83},
        {"\\[",                                                         84},
        {"\\]",                                                         85},
        {"\\{",                                                         86},
        {"\\}",                                                         87},
        {",",                                                           88},
        {":",                                                           89},
        {";",                                                           90},
        {R"(\.\.\.)",                                                   91},
        {"#",                                                           92},
        {"\'",                                                          93},
        {"\"",                                                          94},
        {"//|/\\*|\\*/",                                                95},
        {R"((?:\n|\t|\r| )+)",                                          96}
};

int Environment::IntSymbol(const string &symbol) {
    auto it = symbol_map_.find(symbol);
    if (it != symbol_map_.cend()) {
        return it->second;
    }
    return -1;
}

string Environment::StrSymbol(int symbol) {
    return std::find_if(symbol_map_.cbegin(),
                        symbol_map_.cend(),
                        [symbol](const auto &p) {
                            return p.second == symbol;
                        })->first;
}